@page "/login"
@layout LoginLayout
@inject IMediator Mediator

@inject AuthStateProvider authStateProvider
@inject NavigationManager navManager
@inject IJSRuntime js
<AuthorizeView>
    <NotAuthorized>
<MudText Typo="Typo.h4" GutterBottom="true">Logowanie</MudText>
<EditForm Model="_command" Context="login" OnValidSubmit="@Authenticate">
    <ChildContent Context="model">
    <FluentValidationValidator />
   <MudText Color="Color.Error" ><ValidationSummary /></MudText> 
    <MudTextField @bind-Value="_command.UserName" Label="Nazwa użytkownika/Email" Variant="Variant.Outlined" Class="my-6"></MudTextField>
    <MudTextField @bind-Value="@_command.Password" Label="Hasło" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="TogglePasswordVisibility" />
    <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit" Size="Size.Large" FullWidth="true">Zaloguj</MudButton>
</ChildContent>
</EditForm>
</NotAuthorized>
<Authorized>
    <LoginDisplay/>
</Authorized>
</AuthorizeView>
@code {
  
    AccountLoginCommand _command = new();
    bool PasswordVisibility;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void TogglePasswordVisibility()
    {
        @if (PasswordVisibility)
        {
            PasswordVisibility = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            PasswordVisibility = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }



    private async Task Authenticate()
    {
        
        var userAccount =  await Mediator.Send(_command);
        
        if (userAccount is not null)
        {
            await authStateProvider.UpdateAuthenticationState(new UserSession
                {
                    UserName = userAccount.UserName,
                    Role = userAccount.Role
                });
            navManager.NavigateTo("/", true);
        }
    }
}
