// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sc3S.Data;

#nullable disable

namespace Sc3S.Migrations
{
    [DbContext(typeof(Sc3SContext))]
    [Migration("20220428060212_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Sc3S.Entities.Account", b =>
                {
                    b.Property<string>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Accounts", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));

                    b.HasData(
                        new
                        {
                            UserId = "a8598d2a-9734-4544-b87f-d7d69aa790e9",
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 6, 2, 11, 852, DateTimeKind.Utc).AddTicks(4465),
                            Email = "admin@admin.com",
                            IsDeleted = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEG/KmZxW0hQwiZGOw/HjhWjEg8pkPxEkJJRBX/891yip3sQ3uI4PDYTRa0KOw4MwJw==",
                            RoleId = "1320173d-7e65-44c2-82ca-973c3cf1bdf4",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 6, 2, 11, 852, DateTimeKind.Utc).AddTicks(4466),
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Sc3S.Entities.Area", b =>
                {
                    b.Property<int>("AreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AreaId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("AreaId");

                    b.HasIndex("PlantId");

                    b.ToTable("Areas", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));

                    b.HasData(
                        new
                        {
                            AreaId = 1,
                            CreatedBy = "cfd23736-9c80-4ec8-9b1a-1dfb9132a5de",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 852, DateTimeKind.Local).AddTicks(7580),
                            Description = "",
                            IsDeleted = false,
                            Name = "Spawalnia",
                            PlantId = 1,
                            UpdatedBy = "cfd23736-9c80-4ec8-9b1a-1dfb9132a5de",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 852, DateTimeKind.Local).AddTicks(7618)
                        },
                        new
                        {
                            AreaId = 2,
                            CreatedBy = "cfd23736-9c80-4ec8-9b1a-1dfb9132a5de",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 852, DateTimeKind.Local).AddTicks(7621),
                            Description = "",
                            IsDeleted = false,
                            Name = "Lakiernia",
                            PlantId = 1,
                            UpdatedBy = "cfd23736-9c80-4ec8-9b1a-1dfb9132a5de",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 852, DateTimeKind.Local).AddTicks(7623)
                        },
                        new
                        {
                            AreaId = 3,
                            CreatedBy = "cfd23736-9c80-4ec8-9b1a-1dfb9132a5de",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 852, DateTimeKind.Local).AddTicks(7624),
                            Description = "",
                            IsDeleted = false,
                            Name = "Montaż",
                            PlantId = 1,
                            UpdatedBy = "cfd23736-9c80-4ec8-9b1a-1dfb9132a5de",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 852, DateTimeKind.Local).AddTicks(7626)
                        },
                        new
                        {
                            AreaId = 4,
                            CreatedBy = "cfd23736-9c80-4ec8-9b1a-1dfb9132a5de",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 852, DateTimeKind.Local).AddTicks(7627),
                            Description = "",
                            IsDeleted = false,
                            Name = "Spawalnia",
                            PlantId = 2,
                            UpdatedBy = "cfd23736-9c80-4ec8-9b1a-1dfb9132a5de",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 852, DateTimeKind.Local).AddTicks(7629)
                        },
                        new
                        {
                            AreaId = 5,
                            CreatedBy = "cfd23736-9c80-4ec8-9b1a-1dfb9132a5de",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 852, DateTimeKind.Local).AddTicks(7630),
                            Description = "",
                            IsDeleted = false,
                            Name = "Lakiernia",
                            PlantId = 2,
                            UpdatedBy = "cfd23736-9c80-4ec8-9b1a-1dfb9132a5de",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 852, DateTimeKind.Local).AddTicks(7632)
                        },
                        new
                        {
                            AreaId = 6,
                            CreatedBy = "cfd23736-9c80-4ec8-9b1a-1dfb9132a5de",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 852, DateTimeKind.Local).AddTicks(7633),
                            Description = "",
                            IsDeleted = false,
                            Name = "Montaż",
                            PlantId = 2,
                            UpdatedBy = "cfd23736-9c80-4ec8-9b1a-1dfb9132a5de",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 852, DateTimeKind.Local).AddTicks(7635)
                        });
                });

            modelBuilder.Entity("Sc3S.Entities.Asset", b =>
                {
                    b.Property<int>("AssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssetId"), 1L, 1);

                    b.Property<int>("CoordinateId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("Process")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("AssetId");

                    b.HasIndex("CoordinateId");

                    b.HasIndex("ModelId");

                    b.ToTable("Assets", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Sc3S.Entities.AssetCategory", b =>
                {
                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("AssetId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("AssetCategories", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Sc3S.Entities.AssetDetail", b =>
                {
                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int>("DetailId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssetId", "DetailId");

                    b.HasIndex("DetailId");

                    b.ToTable("AssetDetails", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Sc3S.Entities.AssetSituation", b =>
                {
                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int>("SituationId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("AssetId", "SituationId");

                    b.HasIndex("SituationId");

                    b.ToTable("AssetSituations", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Sc3S.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5035),
                            Description = "PH 3DMAPPING",
                            IsDeleted = false,
                            Name = "3d Mapping",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5050)
                        },
                        new
                        {
                            CategoryId = 2,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5054),
                            Description = "PH ALS",
                            IsDeleted = false,
                            Name = "ALS",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5056)
                        },
                        new
                        {
                            CategoryId = 3,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5059),
                            Description = "PH ATLAS DRUCKER",
                            IsDeleted = false,
                            Name = "Drukarka Atlas",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5060)
                        },
                        new
                        {
                            CategoryId = 4,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5062),
                            Description = "PH DELLPC",
                            IsDeleted = false,
                            Name = "Dell PC",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5064)
                        },
                        new
                        {
                            CategoryId = 5,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5066),
                            Description = "PH EPSON DRUCKER",
                            IsDeleted = false,
                            Name = "Drukarka Epson",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5068)
                        },
                        new
                        {
                            CategoryId = 6,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5070),
                            Description = "PH FFT",
                            IsDeleted = false,
                            Name = "FFT",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5072)
                        },
                        new
                        {
                            CategoryId = 7,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5074),
                            Description = "PH FIS DRUCKER",
                            IsDeleted = false,
                            Name = "Drukarka Fis",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5075)
                        },
                        new
                        {
                            CategoryId = 8,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5078),
                            Description = "PH FIS EQS",
                            IsDeleted = false,
                            Name = "EQS",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5080)
                        },
                        new
                        {
                            CategoryId = 9,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5082),
                            Description = "PH FPG",
                            IsDeleted = false,
                            Name = "FPG",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5084)
                        },
                        new
                        {
                            CategoryId = 10,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5086),
                            Description = "PH GBA NEC",
                            IsDeleted = false,
                            Name = "GBA NEC",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5088)
                        },
                        new
                        {
                            CategoryId = 11,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5090),
                            Description = "PH GBA SIEMENS",
                            IsDeleted = false,
                            Name = "GBA Siemens",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5092)
                        },
                        new
                        {
                            CategoryId = 12,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5094),
                            Description = "PH GOM",
                            IsDeleted = false,
                            Name = "Gom",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5095)
                        },
                        new
                        {
                            CategoryId = 13,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5098),
                            Description = "PH HDT FIS",
                            IsDeleted = false,
                            Name = "HDT Fis",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5099)
                        },
                        new
                        {
                            CategoryId = 14,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5101),
                            Description = "PH HDT LOGISTIK",
                            IsDeleted = false,
                            Name = "HDT Logistik",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5103)
                        },
                        new
                        {
                            CategoryId = 15,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5106),
                            Description = "PH HDT ZEBRA",
                            IsDeleted = false,
                            Name = "HDT Zebra",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5107)
                        },
                        new
                        {
                            CategoryId = 16,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5109),
                            Description = "PH JUNGMAN",
                            IsDeleted = false,
                            Name = "Jungman",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5111)
                        },
                        new
                        {
                            CategoryId = 17,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5113),
                            Description = "PH LOGISTIK DRUCKER",
                            IsDeleted = false,
                            Name = "Drukarka logistyczna",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5115)
                        },
                        new
                        {
                            CategoryId = 18,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5117),
                            Description = "PH MASTERPC",
                            IsDeleted = false,
                            Name = "MasterPC",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5119)
                        },
                        new
                        {
                            CategoryId = 19,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5121),
                            Description = "PH MDIHOST",
                            IsDeleted = false,
                            Name = "MDI Host",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5122)
                        },
                        new
                        {
                            CategoryId = 20,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5125),
                            Description = "PH MFT",
                            IsDeleted = false,
                            Name = "MFT",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5126)
                        },
                        new
                        {
                            CategoryId = 21,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5129),
                            Description = "PH OPS",
                            IsDeleted = false,
                            Name = "OPS",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5130)
                        },
                        new
                        {
                            CategoryId = 22,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5132),
                            Description = "PH PBL",
                            IsDeleted = false,
                            Name = "PBL",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5134)
                        },
                        new
                        {
                            CategoryId = 23,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5136),
                            Description = "PH PC INDUSTRY",
                            IsDeleted = false,
                            Name = "PC produkcyjny",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5138)
                        },
                        new
                        {
                            CategoryId = 24,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5141),
                            Description = "PH PEGASUS",
                            IsDeleted = false,
                            Name = "Pegasus",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5142)
                        },
                        new
                        {
                            CategoryId = 25,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5145),
                            Description = "PH PHOENIX",
                            IsDeleted = false,
                            Name = "Phoenix",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5146)
                        },
                        new
                        {
                            CategoryId = 26,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5148),
                            Description = "PH QSTORQUE",
                            IsDeleted = false,
                            Name = "Qs Torque",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5150)
                        },
                        new
                        {
                            CategoryId = 27,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5152),
                            Description = "PH SCOUT",
                            IsDeleted = false,
                            Name = "Scout",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5154)
                        },
                        new
                        {
                            CategoryId = 28,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5156),
                            Description = "PH SIEMENS477D",
                            IsDeleted = false,
                            Name = "SIEMENS 477D",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5157)
                        },
                        new
                        {
                            CategoryId = 29,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5160),
                            Description = "PH SIEMENS477DPRO",
                            IsDeleted = false,
                            Name = "SIEMENS 477D pro",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5161)
                        },
                        new
                        {
                            CategoryId = 30,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5206),
                            Description = "PH SIEMENS677D",
                            IsDeleted = false,
                            Name = "SIEMENS 677D",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5209)
                        },
                        new
                        {
                            CategoryId = 31,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5211),
                            Description = "PH SMARTWATCH",
                            IsDeleted = false,
                            Name = "Smartwatch",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5213)
                        },
                        new
                        {
                            CategoryId = 32,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5215),
                            Description = "PH SUPPORT SERVICES",
                            IsDeleted = false,
                            Name = "Support",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5217)
                        },
                        new
                        {
                            CategoryId = 33,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5219),
                            Description = "PH TABLET PANASONIC",
                            IsDeleted = false,
                            Name = "Tablet Panasonic",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5220)
                        },
                        new
                        {
                            CategoryId = 34,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5223),
                            Description = "PH TABLET SURFACE",
                            IsDeleted = false,
                            Name = "Tablet Surface",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5224)
                        },
                        new
                        {
                            CategoryId = 35,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5227),
                            Description = "PH TYPENSCHILD",
                            IsDeleted = false,
                            Name = "Typenschild",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5228)
                        },
                        new
                        {
                            CategoryId = 36,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5231),
                            Description = "PH VCI",
                            IsDeleted = false,
                            Name = "VCI",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5232)
                        },
                        new
                        {
                            CategoryId = 37,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5234),
                            Description = "PH VMT",
                            IsDeleted = false,
                            Name = "VMT",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5236)
                        },
                        new
                        {
                            CategoryId = 38,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5238),
                            Description = "PH WINDOWS SERVER",
                            IsDeleted = false,
                            Name = "WINDOWS Server",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5240)
                        },
                        new
                        {
                            CategoryId = 39,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5243),
                            Description = "PH ZEISS",
                            IsDeleted = false,
                            Name = "Zeiss",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 854, DateTimeKind.Local).AddTicks(5245)
                        });
                });

            modelBuilder.Entity("Sc3S.Entities.CategorySituation", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("SituationId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("CategoryId", "SituationId");

                    b.HasIndex("SituationId");

                    b.ToTable("CategorySituations", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Sc3S.Entities.Communicate", b =>
                {
                    b.Property<int>("CommunicateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommunicateId"), 1L, 1);

                    b.Property<int>("CommunicationType")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<int>("Scope")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("CommunicateId");

                    b.ToTable("Communicates", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Sc3S.Entities.CommunicateArea", b =>
                {
                    b.Property<int>("CommunicateId")
                        .HasColumnType("int");

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("CommunicateId", "AreaId");

                    b.HasIndex("AreaId");

                    b.ToTable("CommunicateAreas", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Sc3S.Entities.CommunicateAsset", b =>
                {
                    b.Property<int>("CommunicateId")
                        .HasColumnType("int");

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("CommunicateId", "AssetId");

                    b.HasIndex("AssetId");

                    b.ToTable("CommunicateAssets", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Sc3S.Entities.CommunicateCategory", b =>
                {
                    b.Property<int>("CommunicateId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("CommunicateId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("CommunicateCategories", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Sc3S.Entities.CommunicateCoordinate", b =>
                {
                    b.Property<int>("CommunicateId")
                        .HasColumnType("int");

                    b.Property<int>("CoordinateId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("CommunicateId", "CoordinateId");

                    b.HasIndex("CoordinateId");

                    b.ToTable("CommunicateCoordinates", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Sc3S.Entities.CommunicateDevice", b =>
                {
                    b.Property<int>("CommunicateId")
                        .HasColumnType("int");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("CommunicateId", "DeviceId");

                    b.HasIndex("DeviceId");

                    b.ToTable("CommunicateDevices", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Sc3S.Entities.CommunicateModel", b =>
                {
                    b.Property<int>("CommunicateId")
                        .HasColumnType("int");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("CommunicateId", "ModelId");

                    b.HasIndex("ModelId");

                    b.ToTable("CommunicateModels", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Sc3S.Entities.CommunicateSpace", b =>
                {
                    b.Property<int>("CommunicateId")
                        .HasColumnType("int");

                    b.Property<int>("SpaceId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("CommunicateId", "SpaceId");

                    b.HasIndex("SpaceId");

                    b.ToTable("CommunicateSpaces", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Sc3S.Entities.Coordinate", b =>
                {
                    b.Property<int>("CoordinateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CoordinateId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<int>("SpaceId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("CoordinateId");

                    b.HasIndex("SpaceId");

                    b.ToTable("Coordinates", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Sc3S.Entities.Detail", b =>
                {
                    b.Property<int>("DetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetailId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("DetailId");

                    b.ToTable("Details", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));

                    b.HasData(
                        new
                        {
                            DetailId = 1,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 859, DateTimeKind.Local).AddTicks(2793),
                            Description = "Podstawowy adres IP",
                            IsDeleted = false,
                            Name = "IP",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 859, DateTimeKind.Local).AddTicks(2817)
                        },
                        new
                        {
                            DetailId = 2,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 859, DateTimeKind.Local).AddTicks(2822),
                            Description = "Adres MAC",
                            IsDeleted = false,
                            Name = "MAC",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 859, DateTimeKind.Local).AddTicks(2823)
                        },
                        new
                        {
                            DetailId = 3,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 859, DateTimeKind.Local).AddTicks(2826),
                            Description = "Nazwa hosta",
                            IsDeleted = false,
                            Name = "Hostname",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 859, DateTimeKind.Local).AddTicks(2827)
                        },
                        new
                        {
                            DetailId = 4,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 859, DateTimeKind.Local).AddTicks(2829),
                            Description = "System operacyjny",
                            IsDeleted = false,
                            Name = "OS",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 859, DateTimeKind.Local).AddTicks(2831)
                        },
                        new
                        {
                            DetailId = 5,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 859, DateTimeKind.Local).AddTicks(2833),
                            Description = "Procesor",
                            IsDeleted = false,
                            Name = "CPU",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 859, DateTimeKind.Local).AddTicks(2835)
                        },
                        new
                        {
                            DetailId = 6,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 859, DateTimeKind.Local).AddTicks(2837),
                            Description = "Pamięć RAM",
                            IsDeleted = false,
                            Name = "RAM",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 859, DateTimeKind.Local).AddTicks(2838)
                        },
                        new
                        {
                            DetailId = 7,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 859, DateTimeKind.Local).AddTicks(2840),
                            Description = "Dysk twardy",
                            IsDeleted = false,
                            Name = "Pamięć",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 859, DateTimeKind.Local).AddTicks(2842)
                        },
                        new
                        {
                            DetailId = 8,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 859, DateTimeKind.Local).AddTicks(2844),
                            Description = "Karta graficzna",
                            IsDeleted = false,
                            Name = "Karta graficzna",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 859, DateTimeKind.Local).AddTicks(2846)
                        },
                        new
                        {
                            DetailId = 9,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 859, DateTimeKind.Local).AddTicks(2848),
                            Description = "Karta sieciowa",
                            IsDeleted = false,
                            Name = "Karta sieciowa",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 859, DateTimeKind.Local).AddTicks(2849)
                        },
                        new
                        {
                            DetailId = 10,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 859, DateTimeKind.Local).AddTicks(2852),
                            Description = "Karta rozszerzeń",
                            IsDeleted = false,
                            Name = "Karta rozszerzeń",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 859, DateTimeKind.Local).AddTicks(2853)
                        },
                        new
                        {
                            DetailId = 11,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 859, DateTimeKind.Local).AddTicks(2855),
                            Description = "Zasilacz",
                            IsDeleted = false,
                            Name = "Zasilacz",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 859, DateTimeKind.Local).AddTicks(2857)
                        });
                });

            modelBuilder.Entity("Sc3S.Entities.Device", b =>
                {
                    b.Property<int>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeviceId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("DeviceId");

                    b.ToTable("Devices", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));

                    b.HasData(
                        new
                        {
                            DeviceId = 1,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 859, DateTimeKind.Local).AddTicks(4246),
                            Description = "Urządzenie drukujące",
                            IsDeleted = false,
                            Name = "drukarka",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 859, DateTimeKind.Local).AddTicks(4256)
                        },
                        new
                        {
                            DeviceId = 2,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 859, DateTimeKind.Local).AddTicks(4260),
                            Description = "Urządzenie komputerowe",
                            IsDeleted = false,
                            Name = "komputer",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 859, DateTimeKind.Local).AddTicks(4261)
                        },
                        new
                        {
                            DeviceId = 3,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 859, DateTimeKind.Local).AddTicks(4264),
                            Description = "Wyświetlacz",
                            IsDeleted = false,
                            Name = "monitor",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 859, DateTimeKind.Local).AddTicks(4265)
                        },
                        new
                        {
                            DeviceId = 4,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 859, DateTimeKind.Local).AddTicks(4268),
                            Description = "Skaner kodów",
                            IsDeleted = false,
                            Name = "Skaner",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 859, DateTimeKind.Local).AddTicks(4269)
                        });
                });

            modelBuilder.Entity("Sc3S.Entities.DeviceSituation", b =>
                {
                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<int>("SituationId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("DeviceId", "SituationId");

                    b.HasIndex("SituationId");

                    b.ToTable("DeviceSituations", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Sc3S.Entities.Model", b =>
                {
                    b.Property<int>("ModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModelId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("ModelId");

                    b.HasIndex("DeviceId");

                    b.ToTable("Models", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Sc3S.Entities.ModelParameter", b =>
                {
                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<int>("ParameterId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ModelId", "ParameterId");

                    b.HasIndex("ParameterId");

                    b.ToTable("ModelParameters", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Sc3S.Entities.Parameter", b =>
                {
                    b.Property<int>("ParameterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParameterId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("ParameterId");

                    b.ToTable("Parameters", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));

                    b.HasData(
                        new
                        {
                            ParameterId = 1,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 860, DateTimeKind.Local).AddTicks(8048),
                            Description = "Wymiar od podłoża pionowo do góry",
                            IsDeleted = false,
                            Name = "Wysokość",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 860, DateTimeKind.Local).AddTicks(8061)
                        },
                        new
                        {
                            ParameterId = 2,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 860, DateTimeKind.Local).AddTicks(8107),
                            Description = "Wymiar w najszerszym miejscu od lewej do prawej",
                            IsDeleted = false,
                            Name = "Szerokość",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 860, DateTimeKind.Local).AddTicks(8109)
                        },
                        new
                        {
                            ParameterId = 3,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 860, DateTimeKind.Local).AddTicks(8112),
                            Description = "Wymiar od najbardziej wysuniętego elementu z przodu urządzenia do tyłu",
                            IsDeleted = false,
                            Name = "Długość",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 860, DateTimeKind.Local).AddTicks(8113)
                        },
                        new
                        {
                            ParameterId = 4,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 860, DateTimeKind.Local).AddTicks(8116),
                            Description = "Nazwa producenta",
                            IsDeleted = false,
                            Name = "Producent",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 860, DateTimeKind.Local).AddTicks(8117)
                        },
                        new
                        {
                            ParameterId = 5,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 860, DateTimeKind.Local).AddTicks(8120),
                            Description = "Rozdzielczość ekranu",
                            IsDeleted = false,
                            Name = "Rozdzielczość",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 860, DateTimeKind.Local).AddTicks(8121)
                        });
                });

            modelBuilder.Entity("Sc3S.Entities.Plant", b =>
                {
                    b.Property<int>("PlantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlantId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("PlantId");

                    b.ToTable("Plants", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));

                    b.HasData(
                        new
                        {
                            PlantId = 1,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 860, DateTimeKind.Local).AddTicks(9484),
                            Description = "Zakład Poznań Antoninek",
                            IsDeleted = false,
                            Name = "P35",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 860, DateTimeKind.Local).AddTicks(9495)
                        },
                        new
                        {
                            PlantId = 2,
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 860, DateTimeKind.Local).AddTicks(9499),
                            Description = "Zakład Crafter Września",
                            IsDeleted = false,
                            Name = "P69",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 860, DateTimeKind.Local).AddTicks(9500)
                        });
                });

            modelBuilder.Entity("Sc3S.Entities.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("QuestionId");

                    b.ToTable("Questions", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Sc3S.Entities.Role", b =>
                {
                    b.Property<string>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("RoleId");

                    b.ToTable("Roles", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));

                    b.HasData(
                        new
                        {
                            RoleId = "1320173d-7e65-44c2-82ca-973c3cf1bdf4",
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 861, DateTimeKind.Local).AddTicks(1903),
                            IsDeleted = false,
                            Name = "Admin",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 861, DateTimeKind.Local).AddTicks(1915)
                        },
                        new
                        {
                            RoleId = "4de524ca-176d-44b3-aa26-15c17ba2ea0d",
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 861, DateTimeKind.Local).AddTicks(1917),
                            IsDeleted = false,
                            Name = "Manager",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 861, DateTimeKind.Local).AddTicks(1919)
                        },
                        new
                        {
                            RoleId = "19d9ba04-7570-4789-8720-8c4fd24fc272",
                            CreatedBy = "seed",
                            CreatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 861, DateTimeKind.Local).AddTicks(1921),
                            IsDeleted = false,
                            Name = "User",
                            UpdatedBy = "seed",
                            UpdatedOn = new DateTime(2022, 4, 28, 8, 2, 11, 861, DateTimeKind.Local).AddTicks(1923)
                        });
                });

            modelBuilder.Entity("Sc3S.Entities.Situation", b =>
                {
                    b.Property<int>("SituationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SituationId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("SituationId");

                    b.ToTable("Situations", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Sc3S.Entities.SituationDetail", b =>
                {
                    b.Property<int>("SituationId")
                        .HasColumnType("int");

                    b.Property<int>("DetailId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("SituationId", "DetailId");

                    b.HasIndex("DetailId");

                    b.ToTable("SituationDetails", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Sc3S.Entities.SituationParameter", b =>
                {
                    b.Property<int>("SituationId")
                        .HasColumnType("int");

                    b.Property<int>("ParameterId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("SituationId", "ParameterId");

                    b.HasIndex("ParameterId");

                    b.ToTable("SituationParameters", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Sc3S.Entities.SituationQuestion", b =>
                {
                    b.Property<int>("SituationId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("SituationId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("SituationQuestions", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Sc3S.Entities.Space", b =>
                {
                    b.Property<int>("SpaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpaceId"), 1L, 1);

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<int>("SpaceType")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("SpaceId");

                    b.HasIndex("AreaId");

                    b.ToTable("Spaces", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Sc3S.Entities.Account", b =>
                {
                    b.HasOne("Sc3S.Entities.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Sc3S.Entities.Area", b =>
                {
                    b.HasOne("Sc3S.Entities.Plant", "Plant")
                        .WithMany("Areas")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("Sc3S.Entities.Asset", b =>
                {
                    b.HasOne("Sc3S.Entities.Coordinate", "Coordinate")
                        .WithMany("Assets")
                        .HasForeignKey("CoordinateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc3S.Entities.Model", "Model")
                        .WithMany("Assets")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Coordinate");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("Sc3S.Entities.AssetCategory", b =>
                {
                    b.HasOne("Sc3S.Entities.Asset", "Asset")
                        .WithMany("AssetCategories")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc3S.Entities.Category", "Category")
                        .WithMany("AssetCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Sc3S.Entities.AssetDetail", b =>
                {
                    b.HasOne("Sc3S.Entities.Asset", "Asset")
                        .WithMany("AssetDetails")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc3S.Entities.Detail", "Detail")
                        .WithMany("AssetDetails")
                        .HasForeignKey("DetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("Detail");
                });

            modelBuilder.Entity("Sc3S.Entities.AssetSituation", b =>
                {
                    b.HasOne("Sc3S.Entities.Asset", "Asset")
                        .WithMany("AssetSituations")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc3S.Entities.Situation", "Situation")
                        .WithMany("AssetSituations")
                        .HasForeignKey("SituationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("Situation");
                });

            modelBuilder.Entity("Sc3S.Entities.CategorySituation", b =>
                {
                    b.HasOne("Sc3S.Entities.Category", "Category")
                        .WithMany("CategorySituations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc3S.Entities.Situation", "Situation")
                        .WithMany("CategorySituations")
                        .HasForeignKey("SituationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Situation");
                });

            modelBuilder.Entity("Sc3S.Entities.CommunicateArea", b =>
                {
                    b.HasOne("Sc3S.Entities.Area", "Area")
                        .WithMany("CommunicateAreas")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc3S.Entities.Communicate", "Communicate")
                        .WithMany("CommunicateAreas")
                        .HasForeignKey("CommunicateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Communicate");
                });

            modelBuilder.Entity("Sc3S.Entities.CommunicateAsset", b =>
                {
                    b.HasOne("Sc3S.Entities.Asset", "Asset")
                        .WithMany("CommunicateAssets")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc3S.Entities.Communicate", "Communicate")
                        .WithMany("CommunicateAssets")
                        .HasForeignKey("CommunicateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("Communicate");
                });

            modelBuilder.Entity("Sc3S.Entities.CommunicateCategory", b =>
                {
                    b.HasOne("Sc3S.Entities.Category", "Category")
                        .WithMany("CommunicateCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc3S.Entities.Communicate", "Communicate")
                        .WithMany("CommunicateCategories")
                        .HasForeignKey("CommunicateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Communicate");
                });

            modelBuilder.Entity("Sc3S.Entities.CommunicateCoordinate", b =>
                {
                    b.HasOne("Sc3S.Entities.Communicate", "Communicate")
                        .WithMany("CommunicateCoordinates")
                        .HasForeignKey("CommunicateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc3S.Entities.Coordinate", "Coordinate")
                        .WithMany("CommunicateCoordinates")
                        .HasForeignKey("CoordinateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Communicate");

                    b.Navigation("Coordinate");
                });

            modelBuilder.Entity("Sc3S.Entities.CommunicateDevice", b =>
                {
                    b.HasOne("Sc3S.Entities.Communicate", "Communicate")
                        .WithMany("CommunicateDevices")
                        .HasForeignKey("CommunicateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc3S.Entities.Device", "Device")
                        .WithMany("CommunicateDevices")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Communicate");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Sc3S.Entities.CommunicateModel", b =>
                {
                    b.HasOne("Sc3S.Entities.Communicate", "Communicate")
                        .WithMany("CommunicateModels")
                        .HasForeignKey("CommunicateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc3S.Entities.Model", "Model")
                        .WithMany("CommunicateModels")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Communicate");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("Sc3S.Entities.CommunicateSpace", b =>
                {
                    b.HasOne("Sc3S.Entities.Communicate", "Communicate")
                        .WithMany("CommunicateSpaces")
                        .HasForeignKey("CommunicateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc3S.Entities.Space", "Space")
                        .WithMany("CommunicateSpaces")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Communicate");

                    b.Navigation("Space");
                });

            modelBuilder.Entity("Sc3S.Entities.Coordinate", b =>
                {
                    b.HasOne("Sc3S.Entities.Space", "Space")
                        .WithMany("Coordinates")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Space");
                });

            modelBuilder.Entity("Sc3S.Entities.DeviceSituation", b =>
                {
                    b.HasOne("Sc3S.Entities.Device", "Device")
                        .WithMany("DeviceSituations")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc3S.Entities.Situation", "Situation")
                        .WithMany("DeviceSituations")
                        .HasForeignKey("SituationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Situation");
                });

            modelBuilder.Entity("Sc3S.Entities.Model", b =>
                {
                    b.HasOne("Sc3S.Entities.Device", "Device")
                        .WithMany("Models")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Sc3S.Entities.ModelParameter", b =>
                {
                    b.HasOne("Sc3S.Entities.Model", "Model")
                        .WithMany("ModelParameters")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc3S.Entities.Parameter", "Parameter")
                        .WithMany("ModelParameters")
                        .HasForeignKey("ParameterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Model");

                    b.Navigation("Parameter");
                });

            modelBuilder.Entity("Sc3S.Entities.SituationDetail", b =>
                {
                    b.HasOne("Sc3S.Entities.Detail", "Detail")
                        .WithMany("SituationDetails")
                        .HasForeignKey("DetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc3S.Entities.Situation", "Situation")
                        .WithMany("SituationDetails")
                        .HasForeignKey("SituationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Detail");

                    b.Navigation("Situation");
                });

            modelBuilder.Entity("Sc3S.Entities.SituationParameter", b =>
                {
                    b.HasOne("Sc3S.Entities.Parameter", "Parameter")
                        .WithMany("SituationParameters")
                        .HasForeignKey("ParameterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc3S.Entities.Situation", "Situation")
                        .WithMany("SituationParameters")
                        .HasForeignKey("SituationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Parameter");

                    b.Navigation("Situation");
                });

            modelBuilder.Entity("Sc3S.Entities.SituationQuestion", b =>
                {
                    b.HasOne("Sc3S.Entities.Question", "Question")
                        .WithMany("SituationQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc3S.Entities.Situation", "Situation")
                        .WithMany("SituationQuestions")
                        .HasForeignKey("SituationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Situation");
                });

            modelBuilder.Entity("Sc3S.Entities.Space", b =>
                {
                    b.HasOne("Sc3S.Entities.Area", "Area")
                        .WithMany("Spaces")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("Sc3S.Entities.Area", b =>
                {
                    b.Navigation("CommunicateAreas");

                    b.Navigation("Spaces");
                });

            modelBuilder.Entity("Sc3S.Entities.Asset", b =>
                {
                    b.Navigation("AssetCategories");

                    b.Navigation("AssetDetails");

                    b.Navigation("AssetSituations");

                    b.Navigation("CommunicateAssets");
                });

            modelBuilder.Entity("Sc3S.Entities.Category", b =>
                {
                    b.Navigation("AssetCategories");

                    b.Navigation("CategorySituations");

                    b.Navigation("CommunicateCategories");
                });

            modelBuilder.Entity("Sc3S.Entities.Communicate", b =>
                {
                    b.Navigation("CommunicateAreas");

                    b.Navigation("CommunicateAssets");

                    b.Navigation("CommunicateCategories");

                    b.Navigation("CommunicateCoordinates");

                    b.Navigation("CommunicateDevices");

                    b.Navigation("CommunicateModels");

                    b.Navigation("CommunicateSpaces");
                });

            modelBuilder.Entity("Sc3S.Entities.Coordinate", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("CommunicateCoordinates");
                });

            modelBuilder.Entity("Sc3S.Entities.Detail", b =>
                {
                    b.Navigation("AssetDetails");

                    b.Navigation("SituationDetails");
                });

            modelBuilder.Entity("Sc3S.Entities.Device", b =>
                {
                    b.Navigation("CommunicateDevices");

                    b.Navigation("DeviceSituations");

                    b.Navigation("Models");
                });

            modelBuilder.Entity("Sc3S.Entities.Model", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("CommunicateModels");

                    b.Navigation("ModelParameters");
                });

            modelBuilder.Entity("Sc3S.Entities.Parameter", b =>
                {
                    b.Navigation("ModelParameters");

                    b.Navigation("SituationParameters");
                });

            modelBuilder.Entity("Sc3S.Entities.Plant", b =>
                {
                    b.Navigation("Areas");
                });

            modelBuilder.Entity("Sc3S.Entities.Question", b =>
                {
                    b.Navigation("SituationQuestions");
                });

            modelBuilder.Entity("Sc3S.Entities.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Sc3S.Entities.Situation", b =>
                {
                    b.Navigation("AssetSituations");

                    b.Navigation("CategorySituations");

                    b.Navigation("DeviceSituations");

                    b.Navigation("SituationDetails");

                    b.Navigation("SituationParameters");

                    b.Navigation("SituationQuestions");
                });

            modelBuilder.Entity("Sc3S.Entities.Space", b =>
                {
                    b.Navigation("CommunicateSpaces");

                    b.Navigation("Coordinates");
                });
#pragma warning restore 612, 618
        }
    }
}
