// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sc3S.Data;

#nullable disable

namespace Sc3S.Migrations
{
    [DbContext(typeof(Sc3SContext))]
    [Migration("20220426104516_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8c916fc5-5d08-4164-8594-7ac0e2b6e16a",
                            ConcurrencyStamp = "83256a0f-8959-4eb8-a15e-e9c74c782841",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "af138749-2fc8-4bcf-8492-fadb9e0d5415",
                            ConcurrencyStamp = "6d68df77-faee-4dab-bb84-4c445d4cc7a1",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "9588cfdb-8071-49c0-82cf-c51f20d305d2",
                            ConcurrencyStamp = "83e0991b-0ddb-4291-bfe6-f9217019fde5",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "a96d7c75-47f4-409b-a4d1-03f93c105647",
                            RoleId = "8c916fc5-5d08-4164-8594-7ac0e2b6e16a"
                        },
                        new
                        {
                            UserId = "223eea6c-5cfc-4413-ba83-257db573452c",
                            RoleId = "af138749-2fc8-4bcf-8492-fadb9e0d5415"
                        },
                        new
                        {
                            UserId = "5877932b-ce30-45be-a63f-12e5e6e42ed3",
                            RoleId = "9588cfdb-8071-49c0-82cf-c51f20d305d2"
                        },
                        new
                        {
                            UserId = "5877932b-ce30-45be-a63f-12e5e6e42ed3",
                            RoleId = "af138749-2fc8-4bcf-8492-fadb9e0d5415"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Sc3S.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a96d7c75-47f4-409b-a4d1-03f93c105647",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e96b1cfb-ce12-4fdd-b2e0-3f024bb13dd4",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOJxql4s2FpyWe+2F6bp03NBv556mn0oRM7kp4J93b4extb2+r1Yc8eH7VO/tV5gRQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f0a48fb6-f7f9-496a-be66-92ed1965ea9a",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        },
                        new
                        {
                            Id = "223eea6c-5cfc-4413-ba83-257db573452c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cec394b7-28cb-4ef3-a351-d274f4b47631",
                            Email = "manager@manager.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@MANAGER.COM",
                            NormalizedUserName = "MANAGER@MANAGER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOE91CAPVWB9iO2LYg7dM9Y0NWZtfcL/Dv07300QdpquUZzsS8FuJKGtHFQUyuubHA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7ae12fce-1a3e-4b67-8380-02ca0ca92ba9",
                            TwoFactorEnabled = false,
                            UserName = "manager@manager.com"
                        },
                        new
                        {
                            Id = "5877932b-ce30-45be-a63f-12e5e6e42ed3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e9a43eca-5620-443a-be1c-dce507bb752d",
                            Email = "user@user.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@USER.COM",
                            NormalizedUserName = "USER@USER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELuwO02g8/v4Z9ruPQ32cYKywJGOHHB6iz3RSViXhAa8sqUfcMY3hcPX0JqtN4nQMg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "764db6ea-8c8d-4990-b629-7b5f37ba3d8f",
                            TwoFactorEnabled = false,
                            UserName = "user@user.com"
                        });
                });

            modelBuilder.Entity("Sc3S.Entities.Area", b =>
                {
                    b.Property<int>("AreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AreaId"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AreaId");

                    b.HasIndex("PlantId");

                    b.ToTable("Areas", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));

                    b.HasData(
                        new
                        {
                            AreaId = 1,
                            CreatedAt = new DateTime(2022, 4, 26, 12, 45, 16, 164, DateTimeKind.Local).AddTicks(3625),
                            CreatedBy = "cfd23736-9c80-4ec8-9b1a-1dfb9132a5de",
                            Description = "",
                            IsDeleted = false,
                            Name = "Spawalnia",
                            PlantId = 1,
                            UpdatedAt = new DateTime(2022, 4, 26, 12, 45, 16, 164, DateTimeKind.Local).AddTicks(3660),
                            UpdatedBy = "cfd23736-9c80-4ec8-9b1a-1dfb9132a5de"
                        },
                        new
                        {
                            AreaId = 2,
                            CreatedAt = new DateTime(2022, 4, 26, 12, 45, 16, 164, DateTimeKind.Local).AddTicks(3663),
                            CreatedBy = "cfd23736-9c80-4ec8-9b1a-1dfb9132a5de",
                            Description = "",
                            IsDeleted = false,
                            Name = "Lakiernia",
                            PlantId = 1,
                            UpdatedAt = new DateTime(2022, 4, 26, 12, 45, 16, 164, DateTimeKind.Local).AddTicks(3664),
                            UpdatedBy = "cfd23736-9c80-4ec8-9b1a-1dfb9132a5de"
                        },
                        new
                        {
                            AreaId = 3,
                            CreatedAt = new DateTime(2022, 4, 26, 12, 45, 16, 164, DateTimeKind.Local).AddTicks(3666),
                            CreatedBy = "cfd23736-9c80-4ec8-9b1a-1dfb9132a5de",
                            Description = "",
                            IsDeleted = false,
                            Name = "Montaż",
                            PlantId = 1,
                            UpdatedAt = new DateTime(2022, 4, 26, 12, 45, 16, 164, DateTimeKind.Local).AddTicks(3667),
                            UpdatedBy = "cfd23736-9c80-4ec8-9b1a-1dfb9132a5de"
                        },
                        new
                        {
                            AreaId = 4,
                            CreatedAt = new DateTime(2022, 4, 26, 12, 45, 16, 164, DateTimeKind.Local).AddTicks(3669),
                            CreatedBy = "cfd23736-9c80-4ec8-9b1a-1dfb9132a5de",
                            Description = "",
                            IsDeleted = false,
                            Name = "Spawalnia",
                            PlantId = 2,
                            UpdatedAt = new DateTime(2022, 4, 26, 12, 45, 16, 164, DateTimeKind.Local).AddTicks(3670),
                            UpdatedBy = "cfd23736-9c80-4ec8-9b1a-1dfb9132a5de"
                        },
                        new
                        {
                            AreaId = 5,
                            CreatedAt = new DateTime(2022, 4, 26, 12, 45, 16, 164, DateTimeKind.Local).AddTicks(3672),
                            CreatedBy = "cfd23736-9c80-4ec8-9b1a-1dfb9132a5de",
                            Description = "",
                            IsDeleted = false,
                            Name = "Lakiernia",
                            PlantId = 2,
                            UpdatedAt = new DateTime(2022, 4, 26, 12, 45, 16, 164, DateTimeKind.Local).AddTicks(3673),
                            UpdatedBy = "cfd23736-9c80-4ec8-9b1a-1dfb9132a5de"
                        },
                        new
                        {
                            AreaId = 6,
                            CreatedAt = new DateTime(2022, 4, 26, 12, 45, 16, 164, DateTimeKind.Local).AddTicks(3675),
                            CreatedBy = "cfd23736-9c80-4ec8-9b1a-1dfb9132a5de",
                            Description = "",
                            IsDeleted = false,
                            Name = "Montaż",
                            PlantId = 2,
                            UpdatedAt = new DateTime(2022, 4, 26, 12, 45, 16, 164, DateTimeKind.Local).AddTicks(3677),
                            UpdatedBy = "cfd23736-9c80-4ec8-9b1a-1dfb9132a5de"
                        });
                });

            modelBuilder.Entity("Sc3S.Entities.Asset", b =>
                {
                    b.Property<int>("AssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssetId"), 1L, 1);

                    b.Property<int>("CoordinateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("Process")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssetId");

                    b.HasIndex("CoordinateId");

                    b.HasIndex("ModelId");

                    b.ToTable("Assets", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Sc3S.Entities.AssetCategory", b =>
                {
                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssetId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("AssetCategories", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Sc3S.Entities.AssetDetail", b =>
                {
                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int>("DetailId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssetId", "DetailId");

                    b.HasIndex("DetailId");

                    b.ToTable("AssetDetails", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Sc3S.Entities.AssetSituation", b =>
                {
                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int>("SituationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssetId", "SituationId");

                    b.HasIndex("SituationId");

                    b.ToTable("AssetSituations", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Sc3S.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6222),
                            CreatedBy = "App",
                            Description = "PH 3DMAPPING",
                            IsDeleted = false,
                            Name = "3d Mapping",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6222),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            CategoryId = 2,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6224),
                            CreatedBy = "App",
                            Description = "PH ALS",
                            IsDeleted = false,
                            Name = "ALS",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6224),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            CategoryId = 3,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6226),
                            CreatedBy = "App",
                            Description = "PH ATLAS DRUCKER",
                            IsDeleted = false,
                            Name = "Drukarka Atlas",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6226),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            CategoryId = 4,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6227),
                            CreatedBy = "App",
                            Description = "PH DELLPC",
                            IsDeleted = false,
                            Name = "Dell PC",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6227),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            CategoryId = 5,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6229),
                            CreatedBy = "App",
                            Description = "PH EPSON DRUCKER",
                            IsDeleted = false,
                            Name = "Drukarka Epson",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6229),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            CategoryId = 6,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6230),
                            CreatedBy = "App",
                            Description = "PH FFT",
                            IsDeleted = false,
                            Name = "FFT",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6230),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            CategoryId = 7,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6231),
                            CreatedBy = "App",
                            Description = "PH FIS DRUCKER",
                            IsDeleted = false,
                            Name = "Drukarka Fis",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6232),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            CategoryId = 8,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6233),
                            CreatedBy = "App",
                            Description = "PH FIS EQS",
                            IsDeleted = false,
                            Name = "EQS",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6233),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            CategoryId = 9,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6234),
                            CreatedBy = "App",
                            Description = "PH FPG",
                            IsDeleted = false,
                            Name = "FPG",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6234),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            CategoryId = 10,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6236),
                            CreatedBy = "App",
                            Description = "PH GBA NEC",
                            IsDeleted = false,
                            Name = "GBA NEC",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6236),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            CategoryId = 11,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6237),
                            CreatedBy = "App",
                            Description = "PH GBA SIEMENS",
                            IsDeleted = false,
                            Name = "GBA Siemens",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6237),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            CategoryId = 12,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6240),
                            CreatedBy = "App",
                            Description = "PH GOM",
                            IsDeleted = false,
                            Name = "Gom",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6240),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            CategoryId = 13,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6241),
                            CreatedBy = "App",
                            Description = "PH HDT FIS",
                            IsDeleted = false,
                            Name = "HDT Fis",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6241),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            CategoryId = 14,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6242),
                            CreatedBy = "App",
                            Description = "PH HDT LOGISTIK",
                            IsDeleted = false,
                            Name = "HDT Logistik",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6242),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            CategoryId = 15,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6311),
                            CreatedBy = "App",
                            Description = "PH HDT ZEBRA",
                            IsDeleted = false,
                            Name = "HDT Zebra",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6312),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            CategoryId = 16,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6313),
                            CreatedBy = "App",
                            Description = "PH JUNGMAN",
                            IsDeleted = false,
                            Name = "Jungman",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6313),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            CategoryId = 17,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6314),
                            CreatedBy = "App",
                            Description = "PH LOGISTIK DRUCKER",
                            IsDeleted = false,
                            Name = "Drukarka logistyczna",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6315),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            CategoryId = 18,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6316),
                            CreatedBy = "App",
                            Description = "PH MASTERPC",
                            IsDeleted = false,
                            Name = "MasterPC",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6316),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            CategoryId = 19,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6317),
                            CreatedBy = "App",
                            Description = "PH MDIHOST",
                            IsDeleted = false,
                            Name = "MDI Host",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6317),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            CategoryId = 20,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6318),
                            CreatedBy = "App",
                            Description = "PH MFT",
                            IsDeleted = false,
                            Name = "MFT",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6318),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            CategoryId = 21,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6319),
                            CreatedBy = "App",
                            Description = "PH OPS",
                            IsDeleted = false,
                            Name = "OPS",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6319),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            CategoryId = 22,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6320),
                            CreatedBy = "App",
                            Description = "PH PBL",
                            IsDeleted = false,
                            Name = "PBL",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6320),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            CategoryId = 23,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6321),
                            CreatedBy = "App",
                            Description = "PH PC INDUSTRY",
                            IsDeleted = false,
                            Name = "PC produkcyjny",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6322),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            CategoryId = 24,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6323),
                            CreatedBy = "App",
                            Description = "PH PEGASUS",
                            IsDeleted = false,
                            Name = "Pegasus",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6323),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            CategoryId = 25,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6324),
                            CreatedBy = "App",
                            Description = "PH PHOENIX",
                            IsDeleted = false,
                            Name = "Phoenix",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6324),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            CategoryId = 26,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6325),
                            CreatedBy = "App",
                            Description = "PH QSTORQUE",
                            IsDeleted = false,
                            Name = "Qs Torque",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6325),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            CategoryId = 27,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6326),
                            CreatedBy = "App",
                            Description = "PH SCOUT",
                            IsDeleted = false,
                            Name = "Scout",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6327),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            CategoryId = 28,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6328),
                            CreatedBy = "App",
                            Description = "PH SIEMENS477D",
                            IsDeleted = false,
                            Name = "SIEMENS 477D",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6328),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            CategoryId = 29,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6329),
                            CreatedBy = "App",
                            Description = "PH SIEMENS477DPRO",
                            IsDeleted = false,
                            Name = "SIEMENS 477D pro",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6329),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            CategoryId = 30,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6330),
                            CreatedBy = "App",
                            Description = "PH SIEMENS677D",
                            IsDeleted = false,
                            Name = "SIEMENS 677D",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6330),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            CategoryId = 31,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6332),
                            CreatedBy = "App",
                            Description = "PH SMARTWATCH",
                            IsDeleted = false,
                            Name = "Smartwatch",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6332),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            CategoryId = 32,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6333),
                            CreatedBy = "App",
                            Description = "PH SUPPORT SERVICES",
                            IsDeleted = false,
                            Name = "Support",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6333),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            CategoryId = 33,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6334),
                            CreatedBy = "App",
                            Description = "PH TABLET PANASONIC",
                            IsDeleted = false,
                            Name = "Tablet Panasonic",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6334),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            CategoryId = 34,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6335),
                            CreatedBy = "App",
                            Description = "PH TABLET SURFACE",
                            IsDeleted = false,
                            Name = "Tablet Surface",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6335),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            CategoryId = 35,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6336),
                            CreatedBy = "App",
                            Description = "PH TYPENSCHILD",
                            IsDeleted = false,
                            Name = "Typenschild",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6336),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            CategoryId = 36,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6338),
                            CreatedBy = "App",
                            Description = "PH VCI",
                            IsDeleted = false,
                            Name = "VCI",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6338),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            CategoryId = 37,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6339),
                            CreatedBy = "App",
                            Description = "PH VMT",
                            IsDeleted = false,
                            Name = "VMT",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6339),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            CategoryId = 38,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6340),
                            CreatedBy = "App",
                            Description = "PH WINDOWS SERVER",
                            IsDeleted = false,
                            Name = "WINDOWS Server",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6340),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            CategoryId = 39,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6341),
                            CreatedBy = "App",
                            Description = "PH ZEISS",
                            IsDeleted = false,
                            Name = "Zeiss",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(6342),
                            UpdatedBy = "App"
                        });
                });

            modelBuilder.Entity("Sc3S.Entities.CategorySituation", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("SituationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId", "SituationId");

                    b.HasIndex("SituationId");

                    b.ToTable("CategorySituations", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Sc3S.Entities.Communicate", b =>
                {
                    b.Property<int>("CommunicateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommunicateId"), 1L, 1);

                    b.Property<int>("CommunicationType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<int>("Scope")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommunicateId");

                    b.ToTable("Communicates", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Sc3S.Entities.CommunicateArea", b =>
                {
                    b.Property<int>("CommunicateId")
                        .HasColumnType("int");

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommunicateId", "AreaId");

                    b.HasIndex("AreaId");

                    b.ToTable("CommunicateAreas", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Sc3S.Entities.CommunicateAsset", b =>
                {
                    b.Property<int>("CommunicateId")
                        .HasColumnType("int");

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommunicateId", "AssetId");

                    b.HasIndex("AssetId");

                    b.ToTable("CommunicateAssets", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Sc3S.Entities.CommunicateCategory", b =>
                {
                    b.Property<int>("CommunicateId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommunicateId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("CommunicateCategories", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Sc3S.Entities.CommunicateCoordinate", b =>
                {
                    b.Property<int>("CommunicateId")
                        .HasColumnType("int");

                    b.Property<int>("CoordinateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommunicateId", "CoordinateId");

                    b.HasIndex("CoordinateId");

                    b.ToTable("CommunicateCoordinates", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Sc3S.Entities.CommunicateDevice", b =>
                {
                    b.Property<int>("CommunicateId")
                        .HasColumnType("int");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommunicateId", "DeviceId");

                    b.HasIndex("DeviceId");

                    b.ToTable("CommunicateDevices", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Sc3S.Entities.CommunicateModel", b =>
                {
                    b.Property<int>("CommunicateId")
                        .HasColumnType("int");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommunicateId", "ModelId");

                    b.HasIndex("ModelId");

                    b.ToTable("CommunicateModels", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Sc3S.Entities.CommunicateSpace", b =>
                {
                    b.Property<int>("CommunicateId")
                        .HasColumnType("int");

                    b.Property<int>("SpaceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommunicateId", "SpaceId");

                    b.HasIndex("SpaceId");

                    b.ToTable("CommunicateSpaces", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Sc3S.Entities.Coordinate", b =>
                {
                    b.Property<int>("CoordinateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CoordinateId"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<int>("SpaceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CoordinateId");

                    b.HasIndex("SpaceId");

                    b.ToTable("Coordinates", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Sc3S.Entities.Detail", b =>
                {
                    b.Property<int>("DetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetailId"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DetailId");

                    b.ToTable("Details", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));

                    b.HasData(
                        new
                        {
                            DetailId = 1,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(7534),
                            CreatedBy = "App",
                            Description = "Podstawowy adres IP",
                            IsDeleted = false,
                            Name = "IP",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(7534),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            DetailId = 2,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(7536),
                            CreatedBy = "App",
                            Description = "Adres MAC",
                            IsDeleted = false,
                            Name = "MAC",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(7537),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            DetailId = 3,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(7538),
                            CreatedBy = "App",
                            Description = "Nazwa hosta",
                            IsDeleted = false,
                            Name = "Hostname",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(7538),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            DetailId = 4,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(7539),
                            CreatedBy = "App",
                            Description = "System operacyjny",
                            IsDeleted = false,
                            Name = "OS",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(7539),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            DetailId = 5,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(7540),
                            CreatedBy = "App",
                            Description = "Procesor",
                            IsDeleted = false,
                            Name = "CPU",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(7540),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            DetailId = 6,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(7541),
                            CreatedBy = "App",
                            Description = "Pamięć RAM",
                            IsDeleted = false,
                            Name = "RAM",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(7541),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            DetailId = 7,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(7542),
                            CreatedBy = "App",
                            Description = "Dysk twardy",
                            IsDeleted = false,
                            Name = "Pamięć",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(7542),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            DetailId = 8,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(7543),
                            CreatedBy = "App",
                            Description = "Karta graficzna",
                            IsDeleted = false,
                            Name = "Karta graficzna",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(7543),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            DetailId = 9,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(7544),
                            CreatedBy = "App",
                            Description = "Karta sieciowa",
                            IsDeleted = false,
                            Name = "Karta sieciowa",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(7544),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            DetailId = 10,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(7545),
                            CreatedBy = "App",
                            Description = "Karta rozszerzeń",
                            IsDeleted = false,
                            Name = "Karta rozszerzeń",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(7545),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            DetailId = 11,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(7546),
                            CreatedBy = "App",
                            Description = "Zasilacz",
                            IsDeleted = false,
                            Name = "Zasilacz",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(7546),
                            UpdatedBy = "App"
                        });
                });

            modelBuilder.Entity("Sc3S.Entities.Device", b =>
                {
                    b.Property<int>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeviceId"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeviceId");

                    b.ToTable("Devices", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));

                    b.HasData(
                        new
                        {
                            DeviceId = 1,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 164, DateTimeKind.Utc).AddTicks(9460),
                            CreatedBy = "App",
                            Description = "Urządzenie drukujące",
                            IsDeleted = false,
                            Name = "drukarka",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 164, DateTimeKind.Utc).AddTicks(9460),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            DeviceId = 2,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 164, DateTimeKind.Utc).AddTicks(9462),
                            CreatedBy = "App",
                            Description = "Urządzenie komputerowe",
                            IsDeleted = false,
                            Name = "komputer",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 164, DateTimeKind.Utc).AddTicks(9463),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            DeviceId = 3,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 164, DateTimeKind.Utc).AddTicks(9464),
                            CreatedBy = "App",
                            Description = "Wyświetlacz",
                            IsDeleted = false,
                            Name = "monitor",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 164, DateTimeKind.Utc).AddTicks(9464),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            DeviceId = 4,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 164, DateTimeKind.Utc).AddTicks(9465),
                            CreatedBy = "App",
                            Description = "Skaner kodów",
                            IsDeleted = false,
                            Name = "Skaner",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 164, DateTimeKind.Utc).AddTicks(9465),
                            UpdatedBy = "App"
                        });
                });

            modelBuilder.Entity("Sc3S.Entities.DeviceSituation", b =>
                {
                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<int>("SituationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeviceId", "SituationId");

                    b.HasIndex("SituationId");

                    b.ToTable("DeviceSituations", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Sc3S.Entities.Model", b =>
                {
                    b.Property<int>("ModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModelId"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ModelId");

                    b.HasIndex("DeviceId");

                    b.ToTable("Models", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Sc3S.Entities.ModelParameter", b =>
                {
                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<int>("ParameterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ModelId", "ParameterId");

                    b.HasIndex("ParameterId");

                    b.ToTable("ModelParameters", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Sc3S.Entities.Parameter", b =>
                {
                    b.Property<int>("ParameterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParameterId"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ParameterId");

                    b.ToTable("Parameters", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));

                    b.HasData(
                        new
                        {
                            ParameterId = 1,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(5112),
                            CreatedBy = "App",
                            Description = "Wymiar od podłoża pionowo do góry",
                            IsDeleted = false,
                            Name = "Wysokość",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(5112),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            ParameterId = 2,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(5115),
                            CreatedBy = "App",
                            Description = "Wymiar w najszerszym miejscu od lewej do prawej",
                            IsDeleted = false,
                            Name = "Szerokość",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(5115),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            ParameterId = 3,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(5116),
                            CreatedBy = "App",
                            Description = "Wymiar od najbardziej wysuniętego elementu z przodu urządzenia do tyłu",
                            IsDeleted = false,
                            Name = "Długość",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(5117),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            ParameterId = 4,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(5117),
                            CreatedBy = "App",
                            Description = "Nazwa producenta",
                            IsDeleted = false,
                            Name = "Producent",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(5118),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            ParameterId = 5,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(5118),
                            CreatedBy = "App",
                            Description = "Rozdzielczość ekranu",
                            IsDeleted = false,
                            Name = "Rozdzielczość",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 165, DateTimeKind.Utc).AddTicks(5119),
                            UpdatedBy = "App"
                        });
                });

            modelBuilder.Entity("Sc3S.Entities.Plant", b =>
                {
                    b.Property<int>("PlantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlantId"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlantId");

                    b.ToTable("Plants", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));

                    b.HasData(
                        new
                        {
                            PlantId = 1,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 164, DateTimeKind.Utc).AddTicks(1230),
                            CreatedBy = "App",
                            Description = "Zakład Poznań Antoninek",
                            IsDeleted = false,
                            Name = "P35",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 164, DateTimeKind.Utc).AddTicks(1235),
                            UpdatedBy = "App"
                        },
                        new
                        {
                            PlantId = 2,
                            CreatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 164, DateTimeKind.Utc).AddTicks(1237),
                            CreatedBy = "App",
                            Description = "Zakład Crafter Września",
                            IsDeleted = false,
                            Name = "P69",
                            UpdatedAt = new DateTime(2022, 4, 26, 10, 45, 16, 164, DateTimeKind.Utc).AddTicks(1237),
                            UpdatedBy = "App"
                        });
                });

            modelBuilder.Entity("Sc3S.Entities.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionId");

                    b.ToTable("Questions", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Sc3S.Entities.Situation", b =>
                {
                    b.Property<int>("SituationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SituationId"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SituationId");

                    b.ToTable("Situations", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Sc3S.Entities.SituationDetail", b =>
                {
                    b.Property<int>("SituationId")
                        .HasColumnType("int");

                    b.Property<int>("DetailId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SituationId", "DetailId");

                    b.HasIndex("DetailId");

                    b.ToTable("SituationDetails", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Sc3S.Entities.SituationParameter", b =>
                {
                    b.Property<int>("SituationId")
                        .HasColumnType("int");

                    b.Property<int>("ParameterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SituationId", "ParameterId");

                    b.HasIndex("ParameterId");

                    b.ToTable("SituationParameters", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Sc3S.Entities.SituationQuestion", b =>
                {
                    b.Property<int>("SituationId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SituationId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("SituationQuestions", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Sc3S.Entities.Space", b =>
                {
                    b.Property<int>("SpaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpaceId"), 1L, 1);

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<int>("SpaceType")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpaceId");

                    b.HasIndex("AreaId");

                    b.ToTable("Spaces", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                        {
                            ttb
                                .HasPeriodStart("PeriodStart")
                                .HasColumnName("PeriodStart");
                            ttb
                                .HasPeriodEnd("PeriodEnd")
                                .HasColumnName("PeriodEnd");
                        }
                    ));
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Sc3S.Entities.ApplicationUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Sc3S.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Sc3S.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Sc3S.Entities.ApplicationUser", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sc3S.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Sc3S.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sc3S.Entities.Area", b =>
                {
                    b.HasOne("Sc3S.Entities.Plant", "Plant")
                        .WithMany("Areas")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("Sc3S.Entities.Asset", b =>
                {
                    b.HasOne("Sc3S.Entities.Coordinate", "Coordinate")
                        .WithMany("Assets")
                        .HasForeignKey("CoordinateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc3S.Entities.Model", "Model")
                        .WithMany("Assets")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Coordinate");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("Sc3S.Entities.AssetCategory", b =>
                {
                    b.HasOne("Sc3S.Entities.Asset", "Asset")
                        .WithMany("AssetCategories")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc3S.Entities.Category", "Category")
                        .WithMany("AssetCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Sc3S.Entities.AssetDetail", b =>
                {
                    b.HasOne("Sc3S.Entities.Asset", "Asset")
                        .WithMany("AssetDetails")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc3S.Entities.Detail", "Detail")
                        .WithMany("AssetDetails")
                        .HasForeignKey("DetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("Detail");
                });

            modelBuilder.Entity("Sc3S.Entities.AssetSituation", b =>
                {
                    b.HasOne("Sc3S.Entities.Asset", "Asset")
                        .WithMany("AssetSituations")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc3S.Entities.Situation", "Situation")
                        .WithMany("AssetSituations")
                        .HasForeignKey("SituationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("Situation");
                });

            modelBuilder.Entity("Sc3S.Entities.CategorySituation", b =>
                {
                    b.HasOne("Sc3S.Entities.Category", "Category")
                        .WithMany("CategorySituations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc3S.Entities.Situation", "Situation")
                        .WithMany("CategorySituations")
                        .HasForeignKey("SituationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Situation");
                });

            modelBuilder.Entity("Sc3S.Entities.CommunicateArea", b =>
                {
                    b.HasOne("Sc3S.Entities.Area", "Area")
                        .WithMany("CommunicateAreas")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc3S.Entities.Communicate", "Communicate")
                        .WithMany("CommunicateAreas")
                        .HasForeignKey("CommunicateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Communicate");
                });

            modelBuilder.Entity("Sc3S.Entities.CommunicateAsset", b =>
                {
                    b.HasOne("Sc3S.Entities.Asset", "Asset")
                        .WithMany("CommunicateAssets")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc3S.Entities.Communicate", "Communicate")
                        .WithMany("CommunicateAssets")
                        .HasForeignKey("CommunicateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("Communicate");
                });

            modelBuilder.Entity("Sc3S.Entities.CommunicateCategory", b =>
                {
                    b.HasOne("Sc3S.Entities.Category", "Category")
                        .WithMany("CommunicateCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc3S.Entities.Communicate", "Communicate")
                        .WithMany("CommunicateCategories")
                        .HasForeignKey("CommunicateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Communicate");
                });

            modelBuilder.Entity("Sc3S.Entities.CommunicateCoordinate", b =>
                {
                    b.HasOne("Sc3S.Entities.Communicate", "Communicate")
                        .WithMany("CommunicateCoordinates")
                        .HasForeignKey("CommunicateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc3S.Entities.Coordinate", "Coordinate")
                        .WithMany("CommunicateCoordinates")
                        .HasForeignKey("CoordinateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Communicate");

                    b.Navigation("Coordinate");
                });

            modelBuilder.Entity("Sc3S.Entities.CommunicateDevice", b =>
                {
                    b.HasOne("Sc3S.Entities.Communicate", "Communicate")
                        .WithMany("CommunicateDevices")
                        .HasForeignKey("CommunicateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc3S.Entities.Device", "Device")
                        .WithMany("CommunicateDevices")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Communicate");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Sc3S.Entities.CommunicateModel", b =>
                {
                    b.HasOne("Sc3S.Entities.Communicate", "Communicate")
                        .WithMany("CommunicateModels")
                        .HasForeignKey("CommunicateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc3S.Entities.Model", "Model")
                        .WithMany("CommunicateModels")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Communicate");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("Sc3S.Entities.CommunicateSpace", b =>
                {
                    b.HasOne("Sc3S.Entities.Communicate", "Communicate")
                        .WithMany("CommunicateSpaces")
                        .HasForeignKey("CommunicateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc3S.Entities.Space", "Space")
                        .WithMany("CommunicateSpaces")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Communicate");

                    b.Navigation("Space");
                });

            modelBuilder.Entity("Sc3S.Entities.Coordinate", b =>
                {
                    b.HasOne("Sc3S.Entities.Space", "Space")
                        .WithMany("Coordinates")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Space");
                });

            modelBuilder.Entity("Sc3S.Entities.DeviceSituation", b =>
                {
                    b.HasOne("Sc3S.Entities.Device", "Device")
                        .WithMany("DeviceSituations")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc3S.Entities.Situation", "Situation")
                        .WithMany("DeviceSituations")
                        .HasForeignKey("SituationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Situation");
                });

            modelBuilder.Entity("Sc3S.Entities.Model", b =>
                {
                    b.HasOne("Sc3S.Entities.Device", "Device")
                        .WithMany("Models")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Sc3S.Entities.ModelParameter", b =>
                {
                    b.HasOne("Sc3S.Entities.Model", "Model")
                        .WithMany("ModelParameters")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc3S.Entities.Parameter", "Parameter")
                        .WithMany("ModelParameters")
                        .HasForeignKey("ParameterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Model");

                    b.Navigation("Parameter");
                });

            modelBuilder.Entity("Sc3S.Entities.SituationDetail", b =>
                {
                    b.HasOne("Sc3S.Entities.Detail", "Detail")
                        .WithMany("SituationDetails")
                        .HasForeignKey("DetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc3S.Entities.Situation", "Situation")
                        .WithMany("SituationDetails")
                        .HasForeignKey("SituationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Detail");

                    b.Navigation("Situation");
                });

            modelBuilder.Entity("Sc3S.Entities.SituationParameter", b =>
                {
                    b.HasOne("Sc3S.Entities.Parameter", "Parameter")
                        .WithMany("SituationParameters")
                        .HasForeignKey("ParameterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc3S.Entities.Situation", "Situation")
                        .WithMany("SituationParameters")
                        .HasForeignKey("SituationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Parameter");

                    b.Navigation("Situation");
                });

            modelBuilder.Entity("Sc3S.Entities.SituationQuestion", b =>
                {
                    b.HasOne("Sc3S.Entities.Question", "Question")
                        .WithMany("SituationQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sc3S.Entities.Situation", "Situation")
                        .WithMany("SituationQuestions")
                        .HasForeignKey("SituationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Situation");
                });

            modelBuilder.Entity("Sc3S.Entities.Space", b =>
                {
                    b.HasOne("Sc3S.Entities.Area", "Area")
                        .WithMany("Spaces")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("Sc3S.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Sc3S.Entities.Area", b =>
                {
                    b.Navigation("CommunicateAreas");

                    b.Navigation("Spaces");
                });

            modelBuilder.Entity("Sc3S.Entities.Asset", b =>
                {
                    b.Navigation("AssetCategories");

                    b.Navigation("AssetDetails");

                    b.Navigation("AssetSituations");

                    b.Navigation("CommunicateAssets");
                });

            modelBuilder.Entity("Sc3S.Entities.Category", b =>
                {
                    b.Navigation("AssetCategories");

                    b.Navigation("CategorySituations");

                    b.Navigation("CommunicateCategories");
                });

            modelBuilder.Entity("Sc3S.Entities.Communicate", b =>
                {
                    b.Navigation("CommunicateAreas");

                    b.Navigation("CommunicateAssets");

                    b.Navigation("CommunicateCategories");

                    b.Navigation("CommunicateCoordinates");

                    b.Navigation("CommunicateDevices");

                    b.Navigation("CommunicateModels");

                    b.Navigation("CommunicateSpaces");
                });

            modelBuilder.Entity("Sc3S.Entities.Coordinate", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("CommunicateCoordinates");
                });

            modelBuilder.Entity("Sc3S.Entities.Detail", b =>
                {
                    b.Navigation("AssetDetails");

                    b.Navigation("SituationDetails");
                });

            modelBuilder.Entity("Sc3S.Entities.Device", b =>
                {
                    b.Navigation("CommunicateDevices");

                    b.Navigation("DeviceSituations");

                    b.Navigation("Models");
                });

            modelBuilder.Entity("Sc3S.Entities.Model", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("CommunicateModels");

                    b.Navigation("ModelParameters");
                });

            modelBuilder.Entity("Sc3S.Entities.Parameter", b =>
                {
                    b.Navigation("ModelParameters");

                    b.Navigation("SituationParameters");
                });

            modelBuilder.Entity("Sc3S.Entities.Plant", b =>
                {
                    b.Navigation("Areas");
                });

            modelBuilder.Entity("Sc3S.Entities.Question", b =>
                {
                    b.Navigation("SituationQuestions");
                });

            modelBuilder.Entity("Sc3S.Entities.Situation", b =>
                {
                    b.Navigation("AssetSituations");

                    b.Navigation("CategorySituations");

                    b.Navigation("DeviceSituations");

                    b.Navigation("SituationDetails");

                    b.Navigation("SituationParameters");

                    b.Navigation("SituationQuestions");
                });

            modelBuilder.Entity("Sc3S.Entities.Space", b =>
                {
                    b.Navigation("CommunicateSpaces");

                    b.Navigation("Coordinates");
                });
#pragma warning restore 612, 618
        }
    }
}
